version: '3.8'

# Configuration Docker Compose optimisée pour Synology DS218+
# Architecture ARM64 avec optimisations de performance

services:
  fdm-community:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    
    container_name: fdm-community
    hostname: fdm-community
    
    # Politique de redémarrage conservatrice pour NAS
    restart: unless-stopped
    
    # Configuration réseau
    ports:
      - "3001:3001"
    
    # Optimisations spécifiques DS218+ (ARM64, 2GB RAM)
    deploy:
      resources:
        limits:
          cpus: '1.0'        # Maximum 1 CPU core
          memory: 512M       # Maximum 512MB RAM
        reservations:
          cpus: '0.5'        # Reserve 0.5 CPU core
          memory: 256M       # Reserve 256MB RAM
    
    # Variables d'environnement optimisées
    environment:
      - NODE_ENV=production
      - PORT=3001
      - TZ=Europe/Paris
      
      # Optimisations Node.js pour ARM64
      - NODE_OPTIONS=--max-old-space-size=384 --max-semi-space-size=32
      - UV_THREADPOOL_SIZE=4
      - NODE_MAX_PARALLEL_JOBS=2
      
      # Configuration Discord
      - DISCORD_TOKEN=${DISCORD_TOKEN:-MTM5MzQwNjQwNjg2NTk3NzQ3Nw.GVXMXj.apuAo9qscEnDI2G_5XoRpc1oEiGN6jygSb7LQ4}
      - DISCORD_GUILD_ID=${DISCORD_GUILD_ID:-681602280893579342}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-FofoTheBest}
      
      # Configuration cache et performance
      - NODE_PRESERVE_SYMLINKS=1
      - NODE_SKIP_PLATFORM_CHECK=1
    
    # Volumes pour persistance des données
    volumes:
      # Base de données SQLite
      - ./data:/app/data:rw
      
      # Logs de l'application
      - ./logs:/app/logs:rw
      
      # Cache temporaire (volume en mémoire pour performance)
      - fdm-tmp:/tmp:rw
    
    # Configuration réseau
    networks:
      - fdm-network
    
    # Vérification de santé adaptée pour NAS
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/discord/stats"]
      interval: 90s       # Intervalle plus long pour économiser les ressources
      timeout: 15s        # Timeout plus généreux
      retries: 3
      start_period: 45s   # Plus de temps pour démarrer
    
    # Gestion des logs optimisée pour NAS
    logging:
      driver: "json-file"
      options:
        max-size: "5m"    # Taille max par fichier de log
        max-file: "3"     # Nombre max de fichiers de log
        compress: "true"  # Compression pour économiser l'espace
    
    # Sécurité
    security_opt:
      - no-new-privileges:true
    
    # Utilisateur non-root pour sécurité
    user: "1001:1001"
    
    # Limites système pour éviter la surcharge
    ulimits:
      nproc: 65535
      nofile:
        soft: 4096
        hard: 8192
    
    # Désactiver le swap pour les performances
    mem_swappiness: 0
    
    # Priorité du processus (nice value)
    # Plus bas = plus de priorité
    # 0 = priorité normale, 19 = priorité minimale
    # Pour un NAS, on peut mettre 5-10
    init: true

# Volume temporaire en mémoire pour les performances
volumes:
  fdm-tmp:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=100m,uid=1001,gid=1001

# Réseau isolé avec configuration personnalisée
networks:
  fdm-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-fdm
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1